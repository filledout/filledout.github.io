import{_ as e,c as d,o,a as l}from"./app.4dd1e863.js";const m=JSON.parse('{"title":"Field Model","description":"","frontmatter":{},"headers":[{"level":2,"title":"BaseFieldModel","slug":"basefieldmodel","link":"#basefieldmodel","children":[]},{"level":2,"title":"FieldModel","slug":"fieldmodel","link":"#fieldmodel","children":[]},{"level":2,"title":"ListFieldModel","slug":"listfieldmodel","link":"#listfieldmodel","children":[]}],"relativePath":"api/field-model.md"}'),i={name:"api/field-model.md"},t=l('<h1 id="field-model" tabindex="-1">Field Model <a class="header-anchor" href="#field-model" aria-hidden="true">#</a></h1><h2 id="basefieldmodel" tabindex="-1">BaseFieldModel <a class="header-anchor" href="#basefieldmodel" aria-hidden="true">#</a></h2><p>Normal fields and array fields both share this properties:</p><ul><li><code>$value</code> - Derived store based on FormModel <code>$values</code></li><li><code>$isDirty</code> - Derived store based on FormModel <code>$dirty</code>. Set to true when <code>change</code> event been called with specific field path.</li><li><code>$isFocused</code> - Derived store based on FormModel <code>$dirty</code>. Set to true when current focused field on FormModel is the same as specific field.</li><li><code>$isTouched</code> - Derived store based on FormModel <code>$dirty</code>. Set to true when focus event called with specific field path.</li><li><code>$errors</code> - Dervied store based on FormModel <code>$errors</code>. Contains schema validation errors related to the field</li><li><code>path - field string path inside the values object on FormModel </code>$values`</li><li><code>set</code> - setter event which accepts value you want to set for the field (IMPORTANT: doesnt trigger <em>dirty</em> state change).</li><li><code>change</code> - setter event which accepts value you want to set for the field (IMPORTANT: TRIGGERS <em>dirty</em> state change).</li><li><code>changed</code> - event which you want to use to subscribe to react to field value change (called after change was called and value has been set)</li><li><code>focused</code> - UI event which you can subscribe to and which supposed to be called which field gets focused by user</li><li><code>blured</code> - UI event which you can subscribe to and which supposed to be called when field lose focus</li></ul><h2 id="fieldmodel" tabindex="-1">FieldModel <a class="header-anchor" href="#fieldmodel" aria-hidden="true">#</a></h2><p>Fully extends BaseFieldModel</p><h2 id="listfieldmodel" tabindex="-1">ListFieldModel <a class="header-anchor" href="#listfieldmodel" aria-hidden="true">#</a></h2><p>If certain property on fields object has array value type it gonna be typed as LiseFieldModel which extends BaseFieldModel and also has:</p><ul><li><code>remove</code> - event which is wrapped <code>change</code> but accepts position of the element you want to remove. Possible values are &#39;first&#39;, &#39;last&#39; or number.</li><li><code>add</code> - event which accepts an object which looks like {at, value}. <code>at</code> accepts the same params as <code>remove</code> event and <code>value</code> accepts the value you want to add at specified position (it doesnt remove existing item at provided position but only adds new value)</li></ul>',9),a=[t];function s(c,r,n,h,u,f){return o(),d("div",null,a)}const v=e(i,[["render",s]]);export{m as __pageData,v as default};
