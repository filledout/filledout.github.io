import{_ as e,c as o,o as t,a as i}from"./app.4dd1e863.js";const f=JSON.parse('{"title":"createForm()","description":"","frontmatter":{},"headers":[],"relativePath":"api/create-form.md"}'),a={name:"api/create-form.md"},r=i('<h1 id="createform" tabindex="-1"><code>createForm()</code> <a class="header-anchor" href="#createform" aria-hidden="true">#</a></h1><p>Returns FormModel, accepts config object:</p><ul><li><code>reinitialize</code> (optional) works in pair with initialValues. If initialValues is a store with reinitialize set to true the form will be reset every time initialValues store get updated</li><li><code>isDisabled</code> (optional) global flag for a form (purely UI prop) to have global disable state reference on form model</li><li><code>initialValues</code> values object or store with values object</li><li><code>onSubmit</code> (optional) binds passed unit to <code>submitted</code> event via sample (mainly to reduce boilerplate)</li><li><code>onReject</code> (optional) same as onSubmit but called on <code>rejected</code> event</li><li><code>resetOn</code> (optional) array of units to bind <code>reset</code> event (mainly to reduce boilerplate)</li><li><code>validateOn</code> (optional) array of units to bind <code>validate</code> event (mainly to reduce boilerplate)</li><li><code>errors</code> (optional) store with error map which will be passed to <code>$externalErrors</code> form model field. UI param, no inner logic bound to it.</li></ul>',3),l=[r];function c(d,n,s,p,m,u){return t(),o("div",null,l)}const b=e(a,[["render",c]]);export{f as __pageData,b as default};
